{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Server Stack",
    "Parameters": {
        "AppName": {
            "Description": "App Name - use a-z only - preferably all lower-case for consistency. Something like 'blog' - it should match the app's appspec file",
            "Type": "String",
            "MinLength": "1"
        },
        "BucketPrefix": {
            "Description": "A unique string - use something like 'yourname'. This is used to make sure that your S3 bucket name is unique",
            "Type": "String",
            "MinLength": "1"
        },
        "EnvironmentName": {
            "Description": "The environment we are building",
            "Type": "String",
            "Default": "dev",
            "AllowedValues": [
                "dev",
                "staging",
                "production"
            ],
            "MinLength": "1"
        },
        "SSHLocation": {
            "Description": "The IP address range that can be used to SSH to the EC2 instances. Use 0.0.0.0/0 for everyone everywhere (insecure)",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "Default": "0.0.0.0/0",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "SSLCertificateIdArn": {
            "Description": "SSL Certification ID uploaded from AWS CLI. See Arn item in output of 'aws iam list-server-certificates'. Something like arn:aws:iam::123123123:server-certificate/something_over_here",
            "Type": "String",
            "MinLength": "1"
        },
        "SSHKeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
            "MinLength": "1"
        },
        "DBPassword": {
            "NoEcho": "true",
            "Description": "The Database Admin Account Password",
            "Type": "String",
            "MinLength": "8",
            "MaxLength": "41",
            "AllowedPattern": "[a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters."
        },
        "DBMultiAZ": {
            "Default": "false",
            "Description": "Create a Multi-AZ MySQL Amazon RDS database instance",
            "Type": "String",
            "AllowedValues": [
                "true",
                "false"
            ],
            "ConstraintDescription": "must be either true or false."
        },
        "DBAllocatedStorage": {
            "Default": "5",
            "Description": "Allocated DB storage - choose higher for more IOPS",
            "Type": "String",
            "MinLength": "1"
        },
        "DBInstanceType": {
            "Default": "db.m3.medium",
            "Description": "DB Instance Type. ",
            "Type": "String",
            "MinLength": "1"
        },
        "DBStorageEncrypted": {
            "Default": "true",
            "AllowedValues": [
                "true",
                "false"
            ],
            "Description": "DB Instance Encrypt DB Storage (see http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html for supported instance sizes)",
            "Type": "String",
            "MinLength": "1"
        },
        "DBMaxConnections": {
            "Type": "String",
            "Description": "Max DB Connections. Set to 800 on db.m3.xlarge instance - much smaller on tiny instance (30).",
            "Default": "100",
            "MinLength": "1"
        },
        "DBName": {
            "Type": "String",
            "Description": "Database Name - something like 'blog_dev'. Must be all alphanumeric, start with a letter, and can only contain _ (not -)",
            "MinLength": "1"
        },
        "DBStorageType": {
            "Type": "String",
            "Description": "Storage type - standard for traditional disk, gp2 for SSD",
            "Default": "gp2",
            "AllowedValues": [
                "gp2",
                "standard"
            ]
        },
        "SecretKeyBase": {
            "NoEcho": "true",
            "Description": "The Rails Secret Key Base value - use 'bundle exec rake secret' in a rails app",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "128",
            "AllowedPattern": "[-a-zA-Z0-9]*",
            "ConstraintDescription": "must contain only alphanumeric characters."
        },
        "ServerAMIID": {
            "Description": "The Ubuntu AMI to use as the server base - use latest hvm-ssd for us-east-1 from http://cloud-images.ubuntu.com/trusty/current/",
            "Type": "String",
            "ConstraintDescription": "Must be a valid AMI ID",
            "MinLength": "1"
        },
        "WebserverInstanceType": {
            "Default": "m3.medium",
            "Description": "Webserver Instance Type. Probably c4.xlarge for production",
            "Type": "String",
            "MinLength": "1"
        },
        "WebServerCountDesired": {
            "Description": "Desired number of webservers",
            "Type": "String",
            "Default": "1",
            "ConstraintDescription": "Autoscaling group - desired number of webservers"
        },
        "WebServerCountMin": {
            "Description": "Minimum number of webservers",
            "Type": "String",
            "Default": "1",
            "ConstraintDescription": "Autoscaling group - minimum number of webservers"
        },
        "WebServerCountMax": {
            "Description": "Maximum number of webservers",
            "Type": "String",
            "Default": "1",
            "ConstraintDescription": "Autoscaling group - maximum number of webservers"
        },
        "WebServerHealthCheckType": {
            "Description": "Webserver Health Check Type",
            "Type": "String",
            "Default": "EC2",
            "AllowedValues": [
                "ELB",
                "EC2"
            ]
        }
    },
    "Resources": {
        "VPC": {
            "Metadata": {
                "Comment1": "We don't use the default VPC - this makes it easier to ensure the state is exactly as we expect",
                "Comment2": "Yes, we DO use overlapping IP addresses between the different environments.",
                "Comment3": "Overlapping IPs ensure that they can't communicate via private IP address."
            },
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsHostnames": "true",
                "EnableDnsSupport": "true",
                "InstanceTenancy": "default",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "EnvironmentName"
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::VPC"
        },
        "InternetGateway": {
            "Metadata": {
                "Comment1": "This, along with GW1 below are required for internet access, unless you want to run your own NAT instance.",
                "Comment2": "Running a NAT instance means you have a single point of failure, unless you spend a lot of extra energy on it."
            },
            "Type": "AWS::EC2::InternetGateway"
        },
        "GW1": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "MainRouteTable": {
            "Metadata": {
                "Comment1": "Create a custom routing table and add a default route to it.",
                "Comment2": "We use our own routing table (not the VPC routing table), since we need references to it later on in this file"
            },
            "DependsOn": "GW1",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "MainRouteTable"
                    }
                ]
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "DefaultRoute": {
            "Metadata": {
                "Comment1": "The default route for anything other than our internal IP range"
            },
            "DependsOn": "GW1",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "MainRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
        "ServerSubnetWest1A": {
            "Metadata": {
                "Comment1": "We have two server subnets for redundancy",
                "Comment2": "Using this subnet for a service later on will then place it in this Availability Zone"
            },
            "Properties": {
                "AvailabilityZone": "us-east-1a",
                "CidrBlock": "10.0.1.0/24",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Server Subnet West 1A"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "ServerSubnetWest1ARoute": {
            "Metadata": {
                "Comment1": "Add a route for this AZ into the main routing table"
            },
            "Properties": {
                "RouteTableId": {
                    "Ref": "MainRouteTable"
                },
                "SubnetId": {
                    "Ref": "ServerSubnetWest1A"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "ServerSubnetWest1B": {
            "Metadata": {
                "Comment1": "Our second server subnet. See the comment on ServerSubnetWest1A for more details"
            },
            "Properties": {
                "AvailabilityZone": "us-east-1b",
                "CidrBlock": "10.0.2.0/24",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Server Subnet West 1B"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "ServerSubnetWest1BRoute": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "MainRouteTable"
                },
                "SubnetId": {
                    "Ref": "ServerSubnetWest1B"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "DBSubnetWest1A": {
            "Metadata": {
                "Comment1": "Subnet where our database can live (it may live in multiple zones if multi-az was selected)"
            },
            "Properties": {
                "AvailabilityZone": "us-east-1a",
                "CidrBlock": "10.0.10.0/24",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DB Subnet West 1A"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "DBSubnetWest1ARoute": {
            "Metadata": {
                "Comment1": "Route for the DBSubnetWest1A subnet"
            },
            "Properties": {
                "RouteTableId": {
                    "Ref": "MainRouteTable"
                },
                "SubnetId": {
                    "Ref": "DBSubnetWest1A"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "DBSubnetWest1B": {
            "Metadata": {
                "Comment1": "Second subnet where our database could live (See See comment on DBSubnetWest1A for more details)"
            },
            "Properties": {
                "AvailabilityZone": "us-east-1b",
                "CidrBlock": "10.0.11.0/24",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DB Subnet West 1B"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "DBSubnetWest1BRoute": {
            "Metadata": {
                "Comment1": "Route for the DBSubnetWest1B subnet"
            },
            "Properties": {
                "RouteTableId": {
                    "Ref": "MainRouteTable"
                },
                "SubnetId": {
                    "Ref": "DBSubnetWest1B"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "DBSubnetGroup": {
            "Metadata": {
                "Comment1": "Subnet Group that combines the DB subnets. A DB is then placed in a subnet group"
            },
            "Properties": {
                "DBSubnetGroupDescription": "DB Subnet",
                "SubnetIds": [
                    {
                        "Ref": "DBSubnetWest1A"
                    },
                    {
                        "Ref": "DBSubnetWest1B"
                    }
                ]
            },
            "Type": "AWS::RDS::DBSubnetGroup"
        },
        "DBSecurityGroup": {
            "Metadata": {
                "Comment1": "Allow access to the DB from ServerSubnetWest1A and ServerSubnetWest1B",
                "Comment2": "Using a SourceSecurityGroupId here instead is left as a FIXME for the reader"
            },
            "Properties": {
                "GroupDescription": "RDS postgres access",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "0",
                        "IpProtocol": "-1",
                        "ToPort": "0"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "10.0.1.0/24",
                        "FromPort": "5432",
                        "IpProtocol": "tcp",
                        "ToPort": "5432"
                    },
                    {
                        "CidrIp": "10.0.2.0/24",
                        "FromPort": "5432",
                        "IpProtocol": "tcp",
                        "ToPort": "5432"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "DBParameterGroup": {
            "Metadata": {
                "Comment1": "Given our threading model and the number of servers, we needed a way to increase the number of open connections on the DB server.",
                "Comment2": "We thus create a Parameter Group that we can apply to the DB instance."
            },
            "Properties": {
                "Description": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AppName"
                            },
                            "-",
                            {
                                "Ref": "EnvironmentName"
                            },
                            " DB Parameter Group"
                        ]
                    ]
                },
                "Family": "postgres9.4",
                "Parameters": {
                    "max_connections": {
                        "Ref": "DBMaxConnections"
                    }
                }
            },
            "Type": "AWS::RDS::DBParameterGroup"
        },
        "DBInstance": {
            "Metadata": {
                "Comment1": "The system database"
            },
            "Properties": {
                "AllocatedStorage": {
                    "Ref": "DBAllocatedStorage"
                },
                "DBInstanceClass": {
                    "Ref": "DBInstanceType"
                },
                "DBName": { "Ref": "DBName" },
                "DBParameterGroupName": {
                    "Ref": "DBParameterGroup"
                },
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                },
                "StorageType": {
                    "Ref": "DBStorageType"
                },
                "Engine": "postgres",
                "EngineVersion": "9.4.1",
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                },
                "MasterUsername": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "DBName"
                            },
                            "_",
                            {
                                "Ref": "EnvironmentName"
                            },
                            "_user"
                        ]
                    ]
                },
                "MultiAZ": {
                    "Ref": "DBMultiAZ"
                },
                "VPCSecurityGroups": [
                    {
                        "Ref": "DBSecurityGroup"
                    }
                ],
                "StorageEncrypted": {
                    "Ref": "DBStorageEncrypted"
                }
            },
            "Type": "AWS::RDS::DBInstance"
        },
        "ELBSubnetWest1A": {
            "Metadata": {
                "Comment1": "Elastic Load Balancer network - we place the ELB on multiple separate networks in their own IP ranges"
            },
            "Properties": {
                "AvailabilityZone": "us-east-1a",
                "CidrBlock": "10.0.30.0/24",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "ELB Subnet West 1A"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "ELBSubnetWest1ARoute": {
            "Metadata": {
                "Comment1": "Route to the first ELB subnet - ELBSubnetWest1B"
            },
            "Properties": {
                "RouteTableId": {
                    "Ref": "MainRouteTable"
                },
                "SubnetId": {
                    "Ref": "ELBSubnetWest1A"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "ELBSubnetWest1B": {
            "Metadata": {
                "Comment1": "The second Elastic Load Balancer network"
            },
            "Properties": {
                "AvailabilityZone": "us-east-1b",
                "CidrBlock": "10.0.31.0/24",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "ELB Subnet West 1B"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "ELBSubnetWest1BRoute": {
            "Metadata": {
                "Comment1": "Route to the second ELB subnet - ELBSubnetWest1B"
            },
            "Properties": {
                "RouteTableId": {
                    "Ref": "MainRouteTable"
                },
                "SubnetId": {
                    "Ref": "ELBSubnetWest1B"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "ElasticLoadBalancer": {
            "Metadata": {
                "Comment1": "The Elastic Load Balancer"
            },
            "DependsOn": "GW1",
            "Properties": {
                "LoadBalancerName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "AppName"
                            },
                            "-",
                            {
                                "Ref": "EnvironmentName"
                            }
                        ]
                    ]
                },
                "CrossZone": "true",
                "HealthCheck": {
                    "Target": "HTTP:80/ping",
                    "HealthyThreshold": "2",
                    "UnhealthyThreshold": "5",
                    "Interval": "10",
                    "Timeout": "5"
                },
                "ConnectionDrainingPolicy": {
                    "Enabled": "true",
                    "Timeout": "300"
                },
                "LBCookieStickinessPolicy": [
                    {
                        "PolicyName": "CookieBasedPolicy",
                        "CookieExpirationPeriod": "30"
                    }
                ],
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "80",
                        "Protocol": "HTTP"
                    },
                    {
                        "LoadBalancerPort": "443",
                        "InstancePort": "80",
                        "Protocol": "HTTPS",
                        "SSLCertificateId": {
                            "Ref": "SSLCertificateIdArn"
                        }
                    }
                ],
                "SecurityGroups": [
                    {
                        "Ref": "ELBSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Ref": "ELBSubnetWest1A"
                    },
                    {
                        "Ref": "ELBSubnetWest1B"
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
        },
        "ELBSecurityGroup": {
            "Metadata": {
                "Comment1": "Enable HTTP and HTTPS access to the load balancer"
            },
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP and HTTPS access to the load balancer from anywhere",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },

        "ServerSecurityGroup": {
            "Metadata": {
                "Comment1": "All access to the web servers must go through an ELB. Additionally, we terminate SSL at the ELB, so all traffic from ELB to Hosts",
                "Comment2": "is on port 80, not 443."
            },
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable HTTP and HTTPS access locked down to the load balancer + SSH and web access from Gateway Security Group",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "SourceSecurityGroupId": {
                            "Ref": "ELBSecurityGroup"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SSHLocation"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "CodeDeployTrustRole": {
            "Metadata": {
                "Comment1": "Link EC2 and CodeDeploy, so that CodeDeploy can deploy to the EC2 instances",
                "Comment2": "See http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-create-iam-instance-profile.html"
            },
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Sid": "1",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "codedeploy.us-east-1.amazonaws.com"
                                ]
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "CodeDeployRolePolicies": {
            "Metadata": {
                "Comment1": "See http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-create-iam-instance-profile.html"
            },
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "CodeDeployPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "*"
                            ],
                            "Action": [
                                "ec2:Describe*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "*"
                            ],
                            "Action": [
                                "autoscaling:CompleteLifecycleAction",
                                "autoscaling:DeleteLifecycleHook",
                                "autoscaling:DescribeLifecycleHooks",
                                "autoscaling:DescribeAutoScalingGroups",
                                "autoscaling:PutLifecycleHook",
                                "autoscaling:RecordLifecycleActionHeartbeat"
                            ]
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "CodeDeployTrustRole"
                    }
                ]
            }
        },
        "InstanceRole": {
            "Metadata": {
                "Comment1": "EC2 instances need to be able to perform certain actions to perform autoscale and code-deploy actions",
                "Comment2": "Instead of hard-coding security tokens anywhere, we allow the instances to take on specific roles dynamically.",
                "Comment3": "See http://docs.aws.amazon.com/IAM/latest/UserGuide/roles-usingrole-ec2instance.html for general info"
            },
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/"
            }
        },
        "InstanceRolePolicies": {
            "Metadata": {
                "Comment1": "CodeDeploy needs to fetch items from the AWS codedeploy buckets to perform deployments",
                "Comment2": "See http://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-create-iam-instance-profile.html",

                "Comment4": "CodeDeploy will take servers in and out of service as upgrades are applied",
                "Comment5": "To do this, it needs permission to access these resources",
                "Comment6": "See https://blogs.aws.amazon.com/application-management/post/Tx39X8HM93NXU47/Use-AWS-CodeDeploy-to-Deploy-to-Amazon-EC2-Instances-Behind-an-Elastic-Load-Bala",

                "Comment7": "CodeDeploy will take servers in and out of service from the ELB while upgrades are running",
                "Comment8": "ELB rules allow instances to retrieve ELB info, and remove and add themselves back into the ELB",
                "Comment9": "See http://docs.aws.amazon.com/codedeploy/latest/userguide/elastic-load-balancing-integ.html",

                "Comment10": "Let the systems access the S3 bucket where release files are stored",

                "Comment11": "We also use CloudWatch's logging solution to centralise logs from autoscaled servers.",
                "Comment12": "See http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/EC2NewInstanceCWL.html",

                "Comment13": "FIXME - Do we need cloudformation:Describe and cloudformation:GetTemplate in the autoscaling group section too? FIXME"
            },
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "InstanceRole",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:Get*",
                                "s3:List*"
                            ],
                            "Resource": "arn:aws:s3:::aws-codedeploy-us-east-1/*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "autoscaling:Describe*",
                                "autoscaling:EnterStandby",
                                "autoscaling:ExitStandby",
                                "autoscaling:UpdateAutoScalingGroup"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "elasticloadbalancing:Describe*",
                                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:elasticloadbalancing:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":loadbalancer/",
                                        {
                                            "Ref": "AppName"
                                        },
                                        "-",
                                        {
                                            "Ref": "EnvironmentName"
                                        }
                                    ]
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:ListBucket"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "BucketPrefix"
                                        },
                                        "-",
                                        {
                                            "Ref": "AppName"
                                        },
                                        "-",
                                        {
                                            "Ref": "EnvironmentName"
                                        },
                                        "-releases"
                                    ]
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:Get*"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "BucketPrefix"
                                        },
                                        "-",
                                        {
                                            "Ref": "AppName"
                                        },
                                        "-",
                                        {
                                            "Ref": "EnvironmentName"
                                        },
                                        "-releases/*"
                                    ]
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "logs:DescribeLogStreams"
                            ],
                            "Resource": [
                                "arn:aws:logs:*:*:*"
                            ]
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "InstanceRole"
                    }
                ]
            }
        },
        "WebServerInstanceRoleProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "InstanceRole"
                    }
                ]
            }
        },
        "WebServerLaunchConfig": {
            "Metadata": {
                "Comment1": "This is the core of the system - an AutoScaling Group event happens, it uses this config",
                "Comment2": "to build the instances. Here's where we fetch the Ansible configuration from S3 and apply",
                "Comment3": "it to the box that's being built.",

                "Comment4": "The base drive is too small for reasonably sized logs. So we add some disk space on /dev/xvdf"
            },
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": "GW1",
            "Properties": {
                "AssociatePublicIpAddress": "True",
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": 50,
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "ImageId": {
                    "Ref": "ServerAMIID"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "SecurityGroups": [
                    {
                        "Ref": "ServerSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "WebserverInstanceType"
                },
                "IamInstanceProfile": {
                    "Ref": "WebServerInstanceRoleProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash",
                                "",
                                "# If we receive an error, we want to fail completely - rather than continue in a way that might be",
                                "# insecure or unreliable",
                                "set -x",
                                "set -e",
                                "set -o pipefail",
                                "",
                                "################################################################################",
                                "# Settings - versions of packages etc required",
                                "################################################################################",
                                "",
                                "# Working directory - where we store all temporary files",
                                "CLOUD_INIT_DIR=/var/cloud-init",
                                "",
                                "# Ansible version",
                                "ANSIBLE_DEB_NAME=ansible_1.9.1-1ppa~trusty_all.deb",
                                "ANSIBLE_CONFIG_PACKAGE=server-autoscale-latest.tar.gz",
                                "ANSIBLE_REQUIRED_PACKAGES='python-support python-jinja2 python-paramiko python-httplib2 python-crypto sshpass python-markupsafe'",
                                "",
                                "# Where the packages should be downloaded from:",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "RELEASES_BUCKET=",
                                            {
                                                "Ref": "BucketPrefix"
                                            },
                                            "-",
                                            {
                                                "Ref": "AppName"
                                            },
                                            "-",
                                            {
                                                "Ref": "EnvironmentName"
                                            },
                                            "-releases"
                                        ]
                                    ]
                                },
                                "",
                                "APP_FACTS_FILE=app.fact",
                                "",
                                "################################################################################",
                                "# General Setup Process",
                                "################################################################################",
                                "",
                                "# Disable any debian prompts",
                                "export DEBIAN_FRONTEND=noninteractive",
                                "",
                                "# Stop buffering of stdout by python so we can see Ansible feedback immediately",
                                "# if we are tailing the log",
                                "export PYTHONUNBUFFERED=false",
                                "",
                                "# Directory where all commands are run",
                                "mkdir ${CLOUD_INIT_DIR}",
                                "cd ${CLOUD_INIT_DIR}",
                                "",
                                "################################################################################",
                                "# Security Upgrades - Do an initial set of security upgrades immediately,",
                                "# so that we don't go into service unless we're secure",
                                "################################################################################",
                                "",
                                "# us-east-1.ec2.archive.ubuntu.com gets incredibly slow at times, so",
                                "# use the standard url instead",
                                "sed -i /etc/apt/sources.list -e 's/us-east-1.ec2.archive.ubuntu.com/archive.ubuntu.com/g'",
                                "#",
                                "apt-get update",
                                "apt-get -y upgrade",
                                "",
                                "################################################################################",
                                "# AWS CLI",
                                "################################################################################",
                                "# The Ubuntu version is not recent enough for things like changing ELB membership or autoscaling",
                                "# so we need to unzip and install the AWS-supplied version on S3",
                                "apt-get -y install unzip",
                                "curl https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -o awscli-bundle.zip",
                                "unzip awscli-bundle.zip",
                                "./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws",
                                "",
                                "################################################################################",
                                "# Ansible Facts",
                                "################################################################################",
                                "# make location for ansible facts, which can then be used in the ansible config",
                                "",
                                "mkdir -p /etc/ansible/facts.d/",
                                "",
                                "echo '[autoscale]' > /etc/ansible/facts.d/cloudformation.fact",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo app_name=",
                                            {
                                                "Ref": "AppName"
                                            },
                                            " >> /etc/ansible/facts.d/cloudformation.fact"
                                        ]
                                    ]
                                },
                                "# Not used by Rails environment, but potentially useful for Ansible",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo environment_name=",
                                            {
                                                "Ref": "EnvironmentName"
                                            },
                                            " >> /etc/ansible/facts.d/cloudformation.fact"
                                        ]
                                    ]
                                },
                                "echo server_type=webserver >> /etc/ansible/facts.d/cloudformation.fact",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo db_host=",
                                            {
                                                "Fn::GetAtt": [
                                                    "DBInstance",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            " >> /etc/ansible/facts.d/cloudformation.fact"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo db_port=",
                                            {
                                                "Fn::GetAtt": [
                                                    "DBInstance",
                                                    "Endpoint.Port"
                                                ]
                                            },
                                            " >> /etc/ansible/facts.d/cloudformation.fact"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo db_name=",
                                            {
                                                "Ref": "DBName"
                                            },
                                            " >> /etc/ansible/facts.d/cloudformation.fact"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo db_user=",
                                            {
                                                "Ref": "AppName"
                                            },
                                            "_",
                                            {
                                                "Ref": "EnvironmentName"
                                            },
                                            "_user",
                                            " >> /etc/ansible/facts.d/cloudformation.fact"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo db_password=",
                                            {
                                                "Ref": "DBPassword"
                                            },
                                            " >> /etc/ansible/facts.d/cloudformation.fact"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo secret_key_base=",
                                            {
                                                "Ref": "SecretKeyBase"
                                            },
                                            " >> /etc/ansible/facts.d/cloudformation.fact"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo releases_bucket=${RELEASES_BUCKET}",
                                            " >> /etc/ansible/facts.d/cloudformation.fact"
                                        ]
                                    ]
                                },
                                "chmod 600 /etc/ansible/facts.d/cloudformation.fact",
                                "",
                                "################################################################################",
                                "# Install Ansible so that we can configure the rest of the system",
                                "################################################################################",
                                "",
                                "# We use Ansible rather than this script for all functions we can, so that we can",
                                "# do upgrades more easily without having to modify the autoscaling group config.",
                                "",
                                "apt-get install -y $ANSIBLE_REQUIRED_PACKAGES",
                                "",
                                "# Install Ansible",
                                "# Sometimes permissions take a while to propogate. Keep trying to fetch the file.",
                                "until [[ -e ${ANSIBLE_DEB_NAME} ]]",
                                "do",
                                "  aws s3 cp --region us-east-1 s3://${RELEASES_BUCKET}/${ANSIBLE_DEB_NAME} ${ANSIBLE_DEB_NAME}",
                                "done",
                                "dpkg -i ${ANSIBLE_DEB_NAME}",
                                "",
                                "",
                                "# Pull Ansible config from S3 and extract it",
                                "# Sometimes permissions take a while to propogate. Keep trying to fetch the file.",
                                "until [[ -e ${ANSIBLE_CONFIG_PACKAGE} ]]",
                                "do",
                                "  aws s3 cp --region us-east-1 s3://${RELEASES_BUCKET}/${ANSIBLE_CONFIG_PACKAGE} ${ANSIBLE_CONFIG_PACKAGE} || sleep 5",
                                "done",
                                "",
                                "tar zxf ${ANSIBLE_CONFIG_PACKAGE}",
                                "",
                                "cd ${CLOUD_INIT_DIR}/ansible/",
                                "ansible-playbook -vv -i 'localhost,' -c local webserver.yml",
                                "",
                                "# Change permissions on cloud-init logs so that it's not readable by www-data and others",
                                "chmod 0600 /var/log/cloud-init-*.log",
                                "",
                                "################################################################################",
                                "# Done",
                                "################################################################################",
                                "",
                                "echo Cloudformation completion time: `date`",
                                ""
                            ]
                        ]
                    }
                }
            }
        },
        "WebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": [
                    "us-east-1a",
                    "us-east-1b"
                ],
                "LaunchConfigurationName": {
                    "Ref": "WebServerLaunchConfig"
                },
                "DesiredCapacity": {
                    "Ref": "WebServerCountDesired"
                },
                "MinSize": {
                    "Ref": "WebServerCountMin"
                },
                "MaxSize": {
                    "Ref": "WebServerCountMax"
                },
                "HealthCheckType": {
                    "Ref": "WebServerHealthCheckType"
                },
                "HealthCheckGracePeriod": "900",
                "LoadBalancerNames": [
                    {
                        "Ref": "ElasticLoadBalancer"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "WebServerGroup",
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "AutoScalingGroup",
                        "Value": "WebServerGroup",
                        "PropagateAtLaunch": "true"
                    }
                ],
                "VPCZoneIdentifier": [
                    {
                        "Ref": "ServerSubnetWest1A"
                    },
                    {
                        "Ref": "ServerSubnetWest1B"
                    }
                ]
            }
        }
    },
    "Outputs": {
        "CNAMEAddress": {
            "Value": {
                "Fn::GetAtt": [
                    "ElasticLoadBalancer",
                    "DNSName"
                ]
            },
            "Description": "CNAME to add to Route 53"
        }
    }
}
